ООП - объектно ориентированное программирование
OOP - object oriented programming

Парадигма програмирования - общий набор идей, о том, как структурировать программу и
организовать взаимодействие между её компонентами
ООП поддерживаеться / используеться как основная, а чаще всего как единственная парадигма
большинством языков программирования, включая Java, JavaScript, C#, C++, Python

вся программа состоит из классов (class), эти классы взаимодействуют друг с другом
у каждого класса есть:
- методы (действия этого класса / над этим классом)
- атрибуты (свойства класса в целом или отдельного объекта)
ОБЫЧНО каждый класс описан в отдельном файле
свойства объекта - атрибуты класса

Инкапсуляция - механизм языка, ограничивающий доступ одних компонентов программы к другим.
Слово "инкапсуляция" происходит от латинского "in capsula" — "размещение в оболочке".
Написание кода таким образом, чтобы каждый класс был максимально самостоятельным и не зависел
от других классов.
Его внутреннее устройство не должно никого интересовать и не должно ни на что влиять;
каждый класс - "чёрный ящик" с набором кнопок (публичных методов).

  // некоторые разновидности методов:
  // конструкторы
  // геттеры
  // сеттеры

важное ключевое слово:
static - статичный, не связанный с конкретным экземпляром
антоним - динамичный, меняющийся вместе с конкретным экземпляром
статичные методы и атрибуты СВЯЗАНЫ с классом
НО НИЧЕГО не знают про АТРИБУТЫ и методы КОНКРЕТНОГО объекта
Пример: String.format() - отдаёт форматированную строку, но собирает её из аргументов
метод определённо связан с классом String, но никак не связан с любой уже существующей строкой
например, статичными будут все константы

// класс Car - автомобиль
// классы vs. объекты
// Класс и объект - как общая разновидность и конкретный экземпляр
// Класс и объект - как тип и переменная
// Класс String как строки в целом, и объект/экземпляр класса String как отдельная конкретная строка

// Класс как чертёж программы - и программа, которую мы запускаем, как конкретный объект

// - Автомобиль vs. конкретныйАвтомобиль
// - Класс - как архитектурный план, чертёж для объекта
//   - Класс - шаблон с определёнными методами и атрибутами

// - Класс - единица кода, большая, чем метод

обычно атрибуты напрямую (из других классов) менять нельзя, они должны быть недоступны
поэтому все атрибуты пишем так:
  // private Тип имяАтрибута

методы - действия, связанные с этим классом все команды пишутся только внутри одного из методов

Первый метод класса - конструктор (constructor) - от слова "конструировать" - создавать.
Его название совпадает с названием класса
Конструктор без аргументов -- это то, что вызывается при создании объекта оператором new.
Конструктор без аргументов создаётся автоматически для любого класса самой Java.
Писать его не нужно - но можно, если вы хотите что-то добавить.

Конструктор с аргументами позволяет задать атрибуты сразу при создании
Как только мы создали конструктор с аргументами, системный конструктор без аргуметов пропадает
Если нужно использовать конструктор без аргументов, придётся его написать самостоятельно

методы для изменения атрибутов принято называть сеттерами (setters)
set - задать (установить)
название метода традиционно выглядит как public void setАтрибут(ТипАтрибута новоеЗначение)
метод для изменения (задания, если его не было) номера

Сеттеры создаются сразу для всех атрибутов, которые пользователь (другой код) должен
иметь возможность менять.
методы для получения значений атрибутов принято называть геттерами (getters)
get - получить
название метода традиционно выглядит как public ТипАтрибута getАтрибут()














